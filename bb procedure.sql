create or replace PROCEDURE BUS_LIST 
(
P_SLOC IN VARCHAR2,
P_ELOC IN VARCHAR2,
P_JD IN DATE,
P_LIST OUT SYS_REFCURSOR,
P_MSG OUT VARCHAR2
)AS
BEGIN
OPEN P_LIST FOR 
SELECT OPERATOR_NAME ,JOURNEY_DATE,DEPART_TIME,ARRAIV_TIME,BUS_FARE_ROUTE ,BUS_TYPE_NAME FROM
OPERATORS O INNER JOIN BUSES B ON o.operator_id = B.Operator_Id INNER JOIN
SCHEDULED_TIME_FOR_BUSES SB ON SB.BUS_ID=B.Bus_Id INNER JOIN BUS_ROUTE BR ON SB.ROUTE_ID=BR.BUS_ROUTE_ID 
INNER JOIN BUS_TYPES BT
ON BT.BUS_TYPE_ID=B.BUS_TYPES
WHERE Br.Start_Location=P_SLOC AND Br.End_Location=P_ELOC AND SB.JOURNEY_DATE=P_JD;

P_MSG:='YOUR BUS LIST FOR SPECIFIC DATE';

END;
/

create or replace PROCEDURE SCHEDULED_UPDATE_OR_INSERT 
(
P_AID IN VARCHAR2,
P_BID IN NUMBER,
P_RID IN NUMBER,
P_DAT IN DATE,
P_DP_TIME IN VARCHAR2,
P_AR_TIME IN VARCHAR2,
P_BUS_FARE IN NUMBER,
P_FLAG IN NUMBER,
P_MSG OUT VARCHAR2
)AS
CNT NUMBER;
OID NUMBER;
ONAME VARCHAR2(100);
BID NUMBER;
RID NUMBER;
L_QUERY VARCHAR2(3000);
BEGIN
    SELECT COUNT(1) INTO CNT FROM BUSES B INNER JOIN OPERATORS O ON B.OPERATOR_ID=O.OPERATOR_ID INNER JOIN ADMIN_DETAILS AD
 ON O.OPERATOR_ID=AD.OPERATOR_ID WHERE B.BUS_ID=P_BID AND AD.ADMIN_ID=P_AID;
IF CNT !=0 THEN
        ADMIN_CONTEXT_PKG.G_ADMIN:=P_AID;

    SELECT COUNT(BUS_ID),COUNT(ROUTE_ID) INTO BID,RID FROM SCHEDULED_TIME_FOR_BUSES WHERE BUS_ID=P_BID AND ROUTE_ID=P_RID;

    IF P_FLAG=1 THEN
        IF  BID=0 AND RID=0  THEN
        INSERT INTO SCHEDULED_TIME_FOR_BUSES(SCHED_ID,BUS_ID,ROUTE_ID,JOURNEY_DATE,DEPART_TIME,ARRAIV_TIME,BUS_FARE_ROUTE)
        VALUES(SQSCHEDID.NEXTVAL,P_BID,P_RID,P_DAT,P_DP_TIME,P_AR_TIME,P_BUS_FARE);

        SELECT OPERATOR_NAME INTO ONAME FROM OPERATORS O INNER JOIN ADMIN_DETAILS AD ON O.OPERATOR_ID=AD.OPERATOR_ID 
        WHERE AD.ADMIN_ID=P_AID;

P_MSG:='SERVICE SCHEDULED FOR THIS :'||ONAME;
        ELSE
P_MSG:='INSERT OPERATION FAILED';

        END IF;

    ELSIF  P_FLAG =2  THEN
            SELECT COUNT(BUS_ID) INTO CNT FROM SCHEDULED_TIME_FOR_BUSES WHERE BUS_ID=P_BID;
     IF CNT!=0  THEN

        L_QUERY := 'UPDATE SCHEDULED_TIME_FOR_BUSES SET ';
        IF P_DAT IS NOT NULL THEN
        L_QUERY:=L_QUERY || 'JOURNEY_DATE = TO_DATE(''' || TO_CHAR(P_DAT, 'DD-MON-YYYY') || ''', ''DD-MON-YYYY''), ';
        END IF;
        IF P_DP_TIME IS NOT NULL AND P_AR_TIME IS NOT NULL THEN

            L_QUERY := L_QUERY || 'DEPART_TIME ='''|| P_DP_TIME||''', ARRAIV_TIME = '''||P_AR_TIME||''',';
        END IF;
        IF P_DP_TIME IS NOT NULL AND P_AR_TIME IS NULL THEN
          L_QUERY := L_QUERY || 'DEPART_TIME = '''||P_DP_TIME||''',';
        END IF;
        IF P_AR_TIME IS NOT NULL AND P_DP_TIME IS NULL THEN
          L_QUERY := L_QUERY || 'ARRAIV_TIME = '''||P_AR_TIME||''',';
        END IF;
        IF P_BUS_FARE IS NOT NULL THEN
          L_QUERY := L_QUERY || 'BUS_FARE_ROUTE = '||P_BUS_FARE||',';
        END IF;
        IF P_RID IS NOT NULL THEN
          L_QUERY := L_QUERY || 'ROUTE_ID = '||P_RID||',';
        END IF;
        L_QUERY := RTRIM(L_QUERY, ', ');

        L_QUERY := L_QUERY || ' WHERE BUS_ID = '||P_BID;

        DBMS_OUTPUT.PUT_LINE('Executing SQL: ' || L_QUERY);

        EXECUTE IMMEDIATE L_QUERY;

        SELECT OPERATOR_NAME INTO ONAME FROM OPERATORS O INNER JOIN ADMIN_DETAILS AD ON O.OPERATOR_ID=AD.OPERATOR_ID 
        WHERE AD.ADMIN_ID=P_AID;

P_MSG:='UPDATE SUCCESSFUL FOR BUS ID ' || P_BID||' '||ONAME;
        ELSE
P_MSG:='UPDATE OPERATION FAILED: NO MATCHING RECORD FOUND';
        END IF;
        ELSE
P_MSG:='INVALID FLAG VALUE';
       END IF;

ELSE 

P_MSG:='ADMIN ID UNANTHORIZED PLEASE VERIFY THIS ID OR BUS ID NOT VALID';

END IF;


END;
/

create or replace PROCEDURE BOOKING_SEATS_PASSENGER
(
P_BID IN NUMBER,
P_NO_OF_TICKET IN NUMBER,
P_SEAT IN SEAT_NO,
P_PT IN VARCHAR2,
P_PASSENGER_DETAIL IN PASSENGERTABLE,
P_MSG OUT VARCHAR2
)
AS
C NUMBER;
SA NUMBER;
BS NUMBER;
L_BOOKING_ID NUMBER;
V_PRIMARY NUMBER;
CNT NUMBER;
BF NUMBER;
PAY NUMBER;
BEGIN
    BEGIN
    SELECT CAPACITY INTO C FROM BUSES WHERE BUS_ID=P_BID;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    P_MSG:='No bus found with ID ' || P_BID;
    RETURN;
    END;
        BEGIN
        SELECT COUNT(*) INTO CNT FROM (
        SELECT COLUMN_VALUE FROM TABLE(P_SEAT)
        INTERSECT 
        SELECT SEAT_NUMBER FROM BOOKING_PASSENGER_DETAILS WHERE BUS_ID=P_BID );
        IF CNT!=0 THEN
        RAISE_APPLICATION_ERROR(-20012,'SEAT NUMBER ALREADY BOOKED CHOOSE OTHER SEATS');
        END IF;
        SELECT SEAT_AVAL,BOOKED_SEATS INTO SA,BS FROM SEAT_AVAILABLITY WHERE BUS_ID=P_BID;
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN
        SA:=C-P_NO_OF_TICKET;
        BS:=P_NO_OF_TICKET;

        INSERT INTO SEAT_AVAILABLITY(SEAT_AVL_ID, BUS_ID, SEAT_AVAL, BOOKED_SEATS)
        VALUES(SQSAT.NEXTVAL,P_BID,SA,BS);

        GOTO CONTINUE_BOOKING;
        END;

        IF SA>=P_NO_OF_TICKET THEN
        UPDATE SEAT_AVAILABLITY SET SEAT_AVAL=SEAT_AVAL-P_NO_OF_TICKET,BOOKED_SEATS=BOOKED_SEATS+P_NO_OF_TICKET 
        WHERE BUS_ID=P_BID;

        ELSE
        RAISE_APPLICATION_ERROR(-20001,'Not enough available seats. Booking cannot proceed.');
        END IF;



        <<CONTINUE_BOOKING>>
        INSERT INTO BUS_BOOKINGS(BOOKING_ID, PRIMARY_PASSENGER_ID, BOOKING_DATE, NO_OF_TICKET, STATUS,BUS_ID)
         VALUES(SQBKID.NEXTVAL, NULL, SYSDATE, P_NO_OF_TICKET, 'BOOKED',P_BID)
         RETURNING BOOKING_ID INTO L_BOOKING_ID;

         IF P_PASSENGER_DETAIL.COUNT=P_SEAT.COUNT THEN

         FOR I IN 1..P_PASSENGER_DETAIL.COUNT LOOP
         DECLARE
         L_PASSENGER_ID NUMBER;
         BEGIN

         INSERT INTO PASSENGER(PASSENGER_ID, NAME, AGE, GENDER, CONTACT_NUMBER)
         VALUES(SQPID.NEXTVAL,P_PASSENGER_DETAIL(I).NAME, P_PASSENGER_DETAIL(I).AGE, 
             P_PASSENGER_DETAIL(I).GENDER, P_PASSENGER_DETAIL(I).CONTACT_NUMBER)
             RETURNING PASSENGER_ID INTO L_PASSENGER_ID;

             IF P_PASSENGER_DETAIL(I).IS_PRIMARY='Y' THEN
             V_PRIMARY :=L_PASSENGER_ID;
             UPDATE BUS_BOOKINGS SET PRIMARY_PASSENGER_ID=V_PRIMARY WHERE BOOKING_ID=L_BOOKING_ID;
             END IF;


             INSERT INTO BOOKING_PASSENGER_DETAILS(BOOKING_PASSENGER_ID, BOOKING_ID, PASSENGER_ID, SEAT_NUMBER,BUS_ID)
             VALUES(SQBIDD.NEXTVAL,L_BOOKING_ID,L_PASSENGER_ID,P_SEAT(I),P_BID);


        END;
    END LOOP;
    ELSE
    P_MSG:='Number of passengers and seats must be the same.';
    RETURN;
    END IF;
            SELECT BUS_FARE_ROUTE INTO BF FROM SCHEDULED_TIME_FOR_BUSES WHERE BUS_ID=P_BID;

            PAY:=BF*P_NO_OF_TICKET;

            INSERT INTO BOOKING_PAYMENT (PAY_ID,BOOKING_ID,PAY_TYPE,AMOUNT,PAY_DATE,PAY_TIME)
            VALUES(SQBPAY.NEXTVAL,L_BOOKING_ID,P_PT,PAY,SYSDATE,SYSTIMESTAMP);

    P_MSG:='Booking successful for bus ID ' || P_BID ||' BUS FARE IS '||PAY;

    EXCEPTION 
    WHEN OTHERS THEN
    P_MSG:='ERRORS: '||SQLERRM;    
END;
/

